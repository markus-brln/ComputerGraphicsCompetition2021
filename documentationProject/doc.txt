DOCUMENTATION OF DEVELOPMENT PROCESS

March 13 2021
- first try sf::Image 400x400, Scene/3_refraction, standard render -> 2.5 fps
- with openMP -> ~7 fps

March 15
- when moving view around, perspective is not taken into account by raytracer,
  needs fixing
- realized that the green background in the scene was actually another sphere

March 17
- made a virtual screen with:
  Point upperLeft{ eye.x - SIZE / 2, eye.y + SIZE / 2, eye.z - SIZE };
  where SIZE is the amount of pixels in x,y -> leads to 45Â° view
- ray reference (pixel) points generated from:
  Point pixel{ upperLeft.x + x * right.x, upperLeft.y + y * down.y, upperLeft.z };
- screen moves with eye in x,y,z, so no distortions anymore
- TODO: rotation of the eye in x,y,z -> transform upperLeft point and the right+down vectors

March 18
- perspective by transforming upperLeft screen point and right+down 
  edge vectors with x,y,z rotation
- works well, only sometimes (at certain distances) the sphere gets stretched all
  over the screen
- TODO: make WASDQE control move in view direction?
        figure out why the sphere gets stretched

March 23
- session with the TAs, couldn't help me but talked about making a camera vector
- tried reading out values upperLeft point when rotating at different distances 
- realized that when crossing the origin (0,0,0) with the imaginary screen, the 
  calculation of upperLeft (see line 14) would go wrong (hence the stretched sphere,
  reappearing on 1 pi rotation, opposite rotation when very positive in Z)
- took the camera vector (cross product of the rotated right and down vectors)
  and assigned the pixels from there:
  Vector camera = right.cross(down);
  Point screenCentre = eye + camera * SIZE;
  Point pixel = screenCentre + (x - SIZE/2) * right + (y - SIZE/2) * down;
- now everything works as intended, so thank you TAs!

- using W to always go forward -> requires more rotations
- made a Scene::translateEye(double right, double up, double forward)
  it rotates the direction that is fed (e.g. 'W' -> d_raytracer.scene.translateEye(0, 0, -30);)
  by the eyeRotation and adds that to the current eye position
- that deserves a video again with scene 3.json (from assignment): 5PerspectiveWorking.mp4

- added live input (multiple key presses at once) for a smoother experience
- added texture mapping for spheres 

- every Object has to implement a check function to determine whether 
  the eye is at an appropriate position (e.g. not inside sphere)
- virtual void checkCorrectEye(Point &eye) = 0; -> no crashing anymore when trying
  to move into a sphere
  
March 24
- tried upscaling and smoothing, but no real performance gain + ugly + funny noise 
  when using openMP on it
- mapping textures to quad for skybox, added bool isSkybox to Object class
  such that no reflection etc is applied to a Skybox -> faster?
- this helped with figuring out the box coords in 5SolarSystem.json
  https://learnopengl.com/Advanced-OpenGL/Cubemaps
- downloading images for milky way skybox and planets

- texture rotation by 90 degrees around x axis by shuffling around values in 
  Sphere::toUV:
  double u = 0.5 + (atan2(x, z) / (2 * PI));
  double v = 1 - (acos(y / r) / PI);

TODO: - solar system simulation with gravity, skybox
      - handle rotating around Z -> the camera vector
      - circular path of planets
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
